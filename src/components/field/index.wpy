<style lang="less" src="./index.less"></style>
<template>
  <view class="field-cell field {{ error ? 'field-error' : '' }} {{ mode === 'wrapped' ? 'field-wrapped' : '' }}">
    <view
      wx:if="{{ label }}"
      class="field-cell__hd field-title">{{ label }}</view>
    <textarea
      wx:if="{{ type === 'textarea' }}"
      auto-height
      maxlength="{{maxlength}}"
      value="{{ value }}"
      placeholder="{{ placeholder }}"
      disabled="{{disabled}}"
      focus="{{focus}}"
      class="field-input field-cell__bd {{ right ? 'field-input__right' : '' }}"
      placeholder-class="field-placeholder"
      bindinput="_handleZanFieldChange"
      bindfocus="_handleZanFieldFocus"
      bindblur="_handleZanFieldBlur"
      data-component-id="{{ componentId || '' }}"></textarea>
    <input
      wx:else
      type="{{ inputType || 'text' }}"
      maxlength="{{maxlength}}"
      value="{{ value }}"
      placeholder="{{ placeholder }}"
      disabled="{{disabled}}"
      focus="{{focus}}"
      class="field-input field-cell__bd {{ right ? 'field-input__right' : '' }}"
      placeholder-class="field-placeholder"
      bindinput="_handleZanFieldChange"
      bindfocus="_handleZanFieldFocus"
      bindblur="_handleZanFieldBlur"
      data-component-id="{{ componentId || '' }}"/>
  </view>
</template>

<script>
  import wepy from 'wepy'
  export default class Field extends wepy.component {
    props = {
      error: {
        type: Boolean,
        default: false
      },
      mode: {
        type: Boolean,
        default: false
      },
      value: {
        type: [String, Number],
        default: '',
        twoWay: true
      },
      label: { // label文本
        type: String,
        default: ''
      },
      componentId: {
        type: String,
        default: ''
      },
      inputType: { // label文本
        type: String,
        default: 'text'
      },
      placeholder: {
        type: String,
        default: ''
      },
      disabled: { // 是否禁用
        type: [Boolean, String],
        default: false,
        coerce(v) {
          return typeof v === 'string' ? JSON.parse(v) : v
        }
      },
      focus: { // 是否默认聚焦
        type: [Boolean, String],
        default: false,
        coerce(v) {
          return typeof v === 'string' ? JSON.parse(v) : v
        }
      },
      maxlength: {
        type: [Number, String],
        default: 9999
      },
      right: {
      	type: [Boolean, String],
        default: false,
        coerce(v) {
          return typeof v === 'string' ? JSON.parse(v) : v
        }
      }
    }

    methods = {
      _handleChange (e) {
        // debugger
        this.value = e.detail.value
        this.$emit('handleChange', e)
      },
      _handleInput (e) {
        this.value = e.detail.value
        this.$emit('handleInput', e)
      },
      _handleBlur (e) {
        this.value = e.detail.value
        this.$emit('handleBlur', e)
      }
    }
  }
</script>
